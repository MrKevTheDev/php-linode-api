<?php

namespace HnhDigital\LinodeApi;

/*
 * This file is part of the PHP Linode API.
 *
 * (c) H&H|Digital <hello@hnh.digital>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use HnhDigital\LinodeApi\Foundation\Base;

/**
 * This is the Volume class.
 *
 * This file is automatically generated.
 *
 * @link https://developers.linode.com/v4/reference/endpoints/volumes/$id
 *
 * @author Rocco Howard <rocco@hnh.digital>
 */
class Volume extends Base
{
    /**
     * Endpoint.
     *
     * @var string
     */
    protected $endpoint = 'volumes/%s';
    /**
     * Volume Id.
     *
     * @var int
     */
    protected $volume_id;

    /**
     * This model is fillable.
     *
     * @type bool
     */
    protected $fillable = true;

    /**
     * This model's method that provides the data to fill it.
     *
     * @type string
     */
    protected $fill_method = 'get';

    /**
     * Constructor.
     *
     * @return void
     */
    public function __construct($volume_id, $fill = [])
    {
        $this->volume_id = $volume_id;
        parent::__construct($volume_id, $fill);
    }

    /**
     * Returns information about this Volume.
     *
     * @link https://developers.linode.com/v4/reference/endpoints/volumes/$id#GET
     *
     * @return array
     */
    public function get()
    {
        return $this->apiCall('get', '');
    }

    /**
     * Updates this volume.
     *
     * @link https://developers.linode.com/v4/reference/endpoints/volumes/$id#PUT
     *
     * @return void
     */
    public function update($optional = [])
    {
        return $this->apiCall('put', '', ['json' => $this->getDirty($optional)]);
    }

    /**
     * Attach a Block Storage Volume to a Linode.
     *
     * @param int $linode_id      An id to a Linode you'd like this volume to be attached to. Requires an additional scope of `linode:modify` and you must have permission to access that given Linode.
     * @param int $config_id=null (optional)An id to a Linode configuration profile to used when attaching to a Linode that has more than one configuration profile.
     *
     * @link https://developers.linode.com/v4/reference/endpoints/volumes/$id/attach
     *
     * @return bool
     */
    public function attach($linode_id, $config_id = null)
    {
        return $this->apiCall('post', '/attach', ['json' => [
            'linode_id' => $linode_id,
            'config_id' => $config_id,
        ]]);
    }

    /**
     * Attach a Block Storage Volume to a Linode.
     *
     * @param string $label A unique label to identify your new clone volume.
     *
     * @link https://developers.linode.com/v4/reference/endpoints/volumes/$id/attach
     *
     * @return bool
     */
    public function clone($label)
    {
        return $this->apiCall('post', '/clone', ['json' => [
            'label' => $label,
        ]]);
    }

    /**
     * Detach a Block Storage Volume from a Linode.
     *
     * @link https://developers.linode.com/v4/reference/endpoints/volumes/$id/detach
     *
     * @return bool
     */
    public function detach()
    {
        return $this->apiCall('post', '/detach');
    }

    /**
     * Increase the size of a volume. You may not decrease the size of a volume with this endpoint.
     *
     * @param int $size The new size of this volume.
     *
     * @link https://developers.linode.com/v4/reference/endpoints/volumes/$id/resize
     *
     * @return bool
     */
    public function resize($size)
    {
        return $this->apiCall('post', '/resize', ['json' => [
            'size' => $size,
        ]]);
    }

    /**
     * Removes a volume from your account.
     *
     * @link https://developers.linode.com/v4/reference/endpoints/volumes/$id#DELETE
     *
     * @return void
     */
    public function delete()
    {
        return $this->apiCall('delete', '');
    }
}
